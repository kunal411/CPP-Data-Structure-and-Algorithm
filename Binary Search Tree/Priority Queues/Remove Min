/*
Implement the function RemoveMin for the min priority queue class.
For a minimum priority queue, write the function for removing the minimum element present. Remove and return the minimum element.
Note : main function is given for your reference which we are using internally to test the code.

*/

#include <iostream>
#include <climits>
using namespace std;

#include <vector>
class PriorityQueue {
    vector<int> pq;
    
    public :
    
    PriorityQueue() {
        
    }
    
    bool isEmpty() {
        return pq.size() == 0;
    }
    
    // Return the size of priorityQueue - no of elements present
    int getSize() {
        return pq.size();
    }
    
    int getMin() {
        if(isEmpty()) {
            return 0;		// Priority Queue is empty
        }
        return pq[0];
    }
    
    void insert(int data){
        pq.push_back(data);
        int childIndex = pq.size() - 1;
        int parentIndex = (childIndex - 1)/2;

        while(childIndex > 0 && pq.at(childIndex) < pq.at(parentIndex)){

            int temp = pq.at(childIndex);
            pq.at(childIndex) = pq.at(parentIndex);
            pq.at(parentIndex) = temp;

            childIndex = parentIndex;
            parentIndex = (childIndex - 1)/2;
        }
    }
    
    int removeMin() {
        int ans = pq[0];
        pq[0] = pq[pq.size() - 1];
        pq.pop_back();
        
        int parentIndex = 0;
        int leftChildIndex = (2 * parentIndex + 1);
        int rightChildIndex = (2 * parentIndex + 2);
        
        while (leftChildIndex < pq.size()){
            int minIndex = parentIndex;
            if (pq[minIndex] > pq[leftChildIndex]){
                minIndex = leftChildIndex;
            }
            
            if (rightChildIndex < pq.size() && pq[minIndex] > pq[rightChildIndex]){
                minIndex = rightChildIndex;
            }
            
            if (minIndex == parentIndex){
                break;
            }
            
            int temp = pq[parentIndex];
            pq[parentIndex] = pq[minIndex];
            pq[minIndex] = temp;
            parentIndex = minIndex;
            leftChildIndex = 2 * parentIndex + 1;
            rightChildIndex = 2 * parentIndex + 2;
        }
        return ans;
    }
    
    
};


int main() {
    PriorityQueue pq;

    int choice;
    cin >> choice;

    while (choice != -1) {
        switch (choice) {
            case 1:  // insert
                int element;
                cin >> element;
                pq.insert(element);
                break;
            case 2:  // getMin
                cout << pq.getMin() << "\n";
                break;
            case 3:  // removeMax
                cout << pq.removeMin() << "\n";
                break;
            case 4:  // size
                cout << pq.getSize() << "\n";
                break;
            case 5:  // isEmpty
                cout << (pq.isEmpty() ? "true\n" : "false\n");
            default:
                return 0;
        }
        
        cin >> choice;
    }
}
