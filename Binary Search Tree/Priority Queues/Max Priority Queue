/*
Implement the class for Max Priority Queue which includes following functions -
1. getSize -
Return the size of priority queue i.e. number of elements present in the priority queue.
2. isEmpty -
Check if priority queue is empty or not. Return true or false accordingly.
3. insert -
Given an element, insert that element in the priority queue at the correct position.
4. getMax -
Return the maximum element present in the priority queue without deleting. Return -Infinity if priority queue is empty.
5. removeMax -
Delete and return the maximum element present in the priority queue. Return -Infinity if priority queue is empty.
Note : main function is given for your reference which we are using internally to test the class.
*/

#include <iostream>
using namespace std;

#include<vector>

class PriorityQueue
{
    vector<int> pqm;
    
public:
    
    PriorityQueue(){
        
    }
    
    
    bool isEmpty()
    {
        return pqm.size() == 0;
    }
    
    int getSize()
    {
        return pqm.size();
    }
    
    int getMax()
    {
        if (pqm.size() == 0){
            return 0;
        }
        return pqm[0];
    }
    
    void insert(int data)
    {
        pqm.push_back(data);
        int childIndex = pqm.size() - 1;
        while (childIndex > 0){
            int parentIndex = (childIndex - 1) / 2;
            if (pqm[childIndex] > pqm[parentIndex]){
                int temp = pqm[childIndex];
                pqm[childIndex] = pqm[parentIndex];
                pqm[parentIndex] = temp;
            }
            else{
                break;
            }
            childIndex = parentIndex;
        }
    }
    
    int removeMax()
    {
        int ans = pqm[0];
        pqm[0] = pqm[pqm.size() - 1];
        pqm.pop_back();
        
        int parentIndex = 0;
        int leftChildIndex = 2 * parentIndex + 1;
        int rightChildIndex = 2 * parentIndex + 2;
        
        while(leftChildIndex < pqm.size())
        {
            int minIndex = parentIndex;
            if(pqm[leftChildIndex] > pqm[minIndex]){
                minIndex = leftChildIndex;
            }
            
            if (pqm[rightChildIndex] > pqm[minIndex]){
                minIndex = rightChildIndex;
            }
            
            if (minIndex == parentIndex){
                break;
            }
            
            int temp = pqm[minIndex];
            pqm[minIndex] = pqm[parentIndex];
            pqm[parentIndex] = temp;
            parentIndex = minIndex;
            leftChildIndex = 2 * parentIndex + 1;
            rightChildIndex = 2 * parentIndex + 2;
        }
        return ans;
    }
};

int main() {
    PriorityQueue pq;
    int choice;
    cin >> choice;

    while (choice != -1) {
        switch (choice) {
            case 1:  // insert
                int element;
                cin >> element;
                pq.insert(element);
                break;
            case 2:  // getMax
                cout << pq.getMax() << "\n";
                break;
            case 3:  // removeMax
                cout << pq.removeMax() << "\n";
                break;
            case 4:  // size
                cout << pq.getSize() << "\n";
                break;
            case 5:  // isEmpty
                cout << (pq.isEmpty() ? "true\n" : "false\n");
            default:
                return 0;
        }
        
        cin >> choice;
    }
}
