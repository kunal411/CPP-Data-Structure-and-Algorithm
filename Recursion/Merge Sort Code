/*
Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
2 1 5 2 3
Sample Output 2 :
1 2 2 3 5 
*/

#include <iostream>
using namespace std;
void merge(int input[], int si, int ei, int mid){
    
    int arr[ei - si + 1];
    int k = 0, i = si, j = mid + 1;
    
    while(i <= mid && j <= ei){
        if (input[i] < input[j]){
            arr[k] = input[i];
            k++;
            i++;
        }
        else if(input[i] >= input[j]){
            arr[k] = input[j];
            k++;
            j++;
        }
    }
    while(i <= mid){
        arr[k] = input[i];
        k++;
        i++;
    }
    while(j <= ei){
        arr[k] = input[j];
        k++;
        j++;
    }
    int index = si;
    for(int p = 0; p < k; p++){
        input[index] = arr[p];
        index++;
    }
    
}

void mergeSortHelper(int input[], int si, int ei){
    
    if (si >= ei){
        return;
    }
    
    int mid = (si + ei) / 2;
    mergeSortHelper(input, si, mid);
    mergeSortHelper(input, mid + 1, ei);
    merge(input, si, ei, mid);
    
}

void mergeSort(int input[], int size){
    int si = 0;
    int ei = size - 1;
    mergeSortHelper(input, si, ei);
}


int main() {
  int length;
  cin >> length;
  int* input = new int[length];
  for(int i=0; i < length; i++)
    cin >> input[i];
  mergeSort(input, length);
  for(int i = 0; i < length; i++) {
    cout << input[i] << " ";
  }
}
