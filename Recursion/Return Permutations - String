/*
Given a string S, find and return all the possible permutations of the input string.
Note 1 : The order of permutations is not important.
Note 2 : If original string contains duplicate characters, permutations will also be duplicates.
Input Format :
String S
Output Format :
All permutations (in different lines)
Sample Input :
abc
Sample Output :
abc
acb
bac
bca
cab
cba
*/

#include <iostream>
#include <string>
using namespace std;
#include <string>
using namespace std;

int returnPermutations(string input, string output[], int outputIndex = 0, string ans = ""){
   	
    if(input.size() == 0){
        output[outputIndex] = ans;
        return outputIndex + 1;
    }
    
    int smallOutput = outputIndex;
    for(int i = 0; i < input.size(); i++){
        if(i == 0){
            string smallInput = input.substr(1, input.size());
            smallOutput = returnPermutations(smallInput, output, smallOutput, ans + input[i]);
        }
        
        else if(i == input.size() - 1){
            string smallInput = input.substr(0, input.size() - 1);
            smallOutput = returnPermutations(smallInput, output, smallOutput, ans + input[i]);
        }
        
        else{
            string smallInput = input.substr(0, i);
            smallInput += input.substr(i +  1, input.size());
            smallOutput = returnPermutations(smallInput, output, smallOutput, ans + input[i]);
        }
    }
    return smallOutput;
    
}

int main(){
    string input;
    cin >> input;
    string output[10000];
    int count = returnPermutations(input, output);
    for(int i = 0; i < count && i < 10000; i++){
        cout << output[i] << endl;
    }
    return 0;
}
