/*
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 
*/

#include<iostream>
using namespace std;
int partitionFun(int input[], int si, int ei){

    int pivot = input[si];
    int count = 0;
    for(int i = si + 1; i <= ei; i++){
        if (input[i] < pivot){
            count++;
        }
    }

    int index = si + count;

    int temp = input[si];
    input[si] = input[index];
    input[index] = temp;

    int i = si;
    int j = ei;

    while (i < index && j > index){
        if (input[i] >= input[index] && input[j] < input[index]){
            temp = input[i];
            input[i] = input[j];
            input[j] = temp;
        }

        if (input[i] < input[index] && input[j] < input[index]){
            i++;
        }

        else{
            j--;
        }
    }

    return index;

}


void quickSort(int input[], int n, int si = 0, int ei = 0, int count = 0){
    
    if (n == 0 && n == 1){
        return;
    }

    if (count == 0){
        ei = n - 1;
    }

    if (si >= ei){
        return;
    }

    int index = partitionFun(input, si, ei);
    quickSort(input, n, si, index - 1, count + 1);
    quickSort(input, n, index + 1, ei, count + 1);
}

int main(){
    int n;
    cin >> n;
  
    int *input = new int[n];
    
    for(int i = 0; i < n; i++) {
        cin >> input[i];
    }
    
    quickSort(input, n);
    for(int i = 0; i < n; i++) {
        cout << input[i] << " ";
    }
    
    delete [] input;

}


