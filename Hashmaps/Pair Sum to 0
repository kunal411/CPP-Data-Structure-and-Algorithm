/*
Given a random integer array A of size N. Find and print the count of pair of elements in the array which sum up to 0.
Note: Array A can contain duplicate elements as well.
Input format:
The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol N.
The following line contains N space separated integers, that denote the value of the elements of the array.
Output format :
The first and only line of output contains the count of pair of elements in the array which sum up to 0. 
Constraints :
0 <= N <= 10^4
Time Limit: 1 sec
Sample Input 1:
5
2 1 -2 2 3
Sample Output 1:
2
*/

#include <iostream>
using namespace std;

#include<unordered_map>
#include<climits>
int pairSum(int *arr, int n) 
{
    unordered_map<int, int> dict;
    for(int i = 0; i < n; i++) {
        if (dict.count(arr[i]) == 0){
            dict[arr[i]] = 1;
        }
        else{
            dict[arr[i]] += 1;
        }
    }
    
    int count = 0;
    unordered_map<int,int> :: iterator it;
    for (it = dict.begin(); it != dict.end(); it++){
        
        if(it -> first == 0){
            int totalCount = dict[it -> first];
            int toBePrinted = (totalCount * (totalCount - 1)) / 2;
            for (int i = 0; i < toBePrinted; i++){
                count++;
            }
        }
        
        else{
            int curr = it -> first;
            bool isOpposite = dict.count(-1 * curr);
            if (isOpposite == 0){
                continue;
            }
            
            int opposite = -curr;
            int currCount = dict[curr];
            int oppoCount = dict[opposite];
            int toBePrinted = currCount * oppoCount;
            for (int i = 0; i < toBePrinted; i++){
                if (curr < opposite){
                    count++;
                }
                else{
                    count++;
                }
            }
            dict[curr] = 0;
            dict[opposite] = 0;
            
        }
        
    }
    
    
    return count;
}


int main() {
    int n;
    cin >> n;

    int* arr = new int[n];

    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    cout << pairSum(arr, n);

    delete[] arr;
}
