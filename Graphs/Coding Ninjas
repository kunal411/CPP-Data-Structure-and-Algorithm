/*
Given a NxM matrix containing Uppercase English Alphabets only. Your task is to tell if there is a path in the given matrix which makes the sentence “CODINGNINJA” .
There is a path from any cell to all its neighbouring cells. For a particular cell, neighbouring cells are those cells that share an edge or a corner with the cell.
Input Format :
The first line of input contains two space separated integers N and M, where N is number of rows and M is the number of columns in the matrix. 
Each of the following N lines contain M characters. Please note that characters are not space separated.
Output Format :
Print 1 if there is a path which makes the sentence “CODINGNINJA” else print 0.
Constraints :
1 <= N <= 1000
1 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
2 11
CXDXNXNXNXA
XOXIXGXIXJX
Sample Output 1:
1
*/

#include <iostream>
#include <vector>
using namespace std;

#include<string>
int solveHelper(char graph[][MAXN], int n, int m, int i, int j, string str, bool** visited){
    
    if(str.size() == 0){
        return 1;
    }
    
    if(i < 0 || j < 0 || i >= n || j >= m){
        return 0;
    }
    
    if(graph[i][j] != str[0]){
        return 0;
    }
    
    if(visited[i][j]){
        return 0;
    }
    
    visited[i][j] = true;
    
    int ans1 = solveHelper(graph, n, m, i, j + 1, str.substr(1), visited);
    if(ans1){
        return 1;
    }
    
    int ans2 = solveHelper(graph, n, m, i + 1, j + 1, str.substr(1), visited);
    if(ans2){
        return 1;
    }
    
    int ans3 = solveHelper(graph, n, m, i + 1, j, str.substr(1), visited);
    if(ans3){
        return 1;
    }
    
    int ans4 = solveHelper(graph, n, m, i + 1, j - 1, str.substr(1), visited);
    if(ans4){
        return 1;
    }
    
    int ans5 = solveHelper(graph, n, m, i, j - 1, str.substr(1), visited);
    if(ans5){
        return 1;
    }
    
    int ans6 = solveHelper(graph, n, m, i - 1, j - 1, str.substr(1), visited);
    if(ans6){
        return 1;
    }
    
    int ans7 = solveHelper(graph, n, m, i - 1, j, str.substr(1), visited);
    if(ans7){
        return 1;
    }
    
    int ans8 = solveHelper(graph, n, m, i - 1, j + 1, str.substr(1), visited);
    if(ans8){
        return 1;
    }
    
    return 0;
}


int solve(char Graph[][MAXN],int N, int M)
{
	bool** visited = new bool*[N];
    for(int i = 0; i < N; i++){
        visited[i] = new bool[M];
        for(int j = 0; j < M; j++){
            visited[i][j] = false;
        }
    }
    
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            if(Graph[i][j] == 'C'){
                int ans = solveHelper(Graph, N, M, i, j, "CODINGNINJA", visited);
                if(ans){
                    return ans;
                }
                for(int i = 0; i < N; i++){
        			for(int j = 0; j < M; j++){
            			visited[i][j] = false;
        			}
    			}
            }
        }
    }
    
    return 0;
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<char>> board(n, vector<char>(m));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> board[i][j];
        }
    }

    cout << (hasPath(board, n, m) ? 1 : 0);
}
