/*
A thief robbing a store can carry a maximal weight of W into his knapsack. There are N items, and i-th item weigh 'Wi' and the value being 'Vi.' What would be the maximum value V, that the thief can steal?
Input Format :
The first line of the input contains an integer value N, which denotes the total number of items.

The second line of input contains the N number of weights separated by a single space.

The third line of input contains the N number of values separated by a single space.

The fourth line of the input contains an integer value W, which denotes the maximum weight the thief can steal.
Output Format :
Print the maximum value of V that the thief can steal.
Constraints :
1 <= N <= 20
1<= Wi <= 100
1 <= Vi <= 100

Time Limit: 1 sec
Sample Input 1 :
4
1 2 4 5
5 4 8 6
5
Sample Output 1 :
13
Sample Input 2 :
5
12 7 11 8 9
24 13 23 15 16
26
Sample Output 2 :
51
*/
#include <cstring>
#include <iostream>
using namespace std;

int knapsackHelper(int * weights, int * values, int n, int maxWeight, int ** dp){

    if (n == 0 || maxWeight == 0){
        return 0;
    }

    if (dp[maxWeight][n] != -1){
        return dp[maxWeight][n];
    }

    if (weights[0] <= maxWeight){
        int curr_include = knapsackHelper(weights + 1, values + 1, n - 1, maxWeight - weights[0], dp) + values[0];
        int curr_not_include = knapsackHelper(weights + 1, values + 1, n - 1, maxWeight, dp);
        dp[maxWeight][n] = max(curr_include, curr_not_include);
        return dp[maxWeight][n];
    }
    else{
        dp[maxWeight][n] = knapsackHelper(weights + 1, values + 1, n - 1, maxWeight, dp);
        return dp[maxWeight][n];
    }

}


int knapsack(int* weights, int* values, int n, int maxWeight){

    int ** dp = new int*[maxWeight + 1];
    for (int i = 0; i < maxWeight + 1; i++){
        dp[i] = new int[n + 1];
    }

    for (int i = 0; i < maxWeight + 1; i++){
        for (int j = 0; j < n + 1; j++){
            dp[i][j] = -1;
        }
    }

    int ans = knapsackHelper(weights, values, n, maxWeight, dp);
    return ans;


}


int main() {
    int n;
    cin >> n;
    int* wt = new int[n];
    int* val = new int[n];

    for (int i = 0; i < n; i++) {
        cin >> wt[i];
    }

    for (int j = 0; j < n; j++) {
        cin >> val[j];
    }

    int w;
    cin >> w;

    cout << knapsack(wt, val, n, w) << "\n";

    delete[] wt;
    delete[] val;
}
