/*
Gary has two string S and V. Now, Gary wants to know the length shortest subsequence in S, which is not a subsequence in V.
Note: The input data will be such that there will always be a solution.
Input Format :
The first line of input contains a string, that denotes the value of S. The following line contains a string, that denotes the value of V.
Output Format :
Length of shortest subsequence in S such that it is not a subsequence in V
Constraints:
1 <= N <= 1000
1 <= M <= 1000 
Time Limit: 1 second
Sample Input 1:
babab
babba
Sample Output 1:
3
Explanation:
"aab" is the shortest subsequence which is present in S and absent in V.
*/

#include <iostream>
#include <string>
using namespace std;
int getIndex(char ele, string main){
    
    for (int i = 0; i < main.size(); i++){
        if (main[i] == ele){
            return i;
        }
    }
    return -1;
    
}

int solveHelper(string s,string v, int ** dp)
{
	if(v.size() <= 0){
        return 1;
    }
    
    if (s.size() == 0){
        return 1001;
    }
    
    if (dp[s.size()][v.size()] != -1){
        return dp[s.size()][v.size()];
    }
    
    int not_include = solveHelper(s.substr(1), v, dp);
    
    int index = getIndex(s[0], v);
    if (index == -1){
        //dp[s.size()][v.size()] = 1;
        return 1;
    }
    int include = solveHelper(s.substr(1), v.substr(index + 1), dp) + 1;
    int ans = min(include, not_include);
    dp[s.size()][v.size()] = ans;
    return ans;
}


int solve(string s, string v){
    int ** dp = new int * [s.size() + 1];
    for (int i = 0; i < s.size() + 1; i++){
        dp[i] = new int[v.size() + 1];
    }
    
    for (int i = 0; i < s.size() + 1; i++){
        for (int j = 0; j < v.size() + 1; j++){
            dp[i][j] = -1;
        }
    }
    
    return solveHelper(s, v, dp);
    
}

int main() {
    string s, v;
    cin >> s >> v;
    cout << solve(s, v);
}
