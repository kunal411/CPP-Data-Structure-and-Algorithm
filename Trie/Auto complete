/*
Given n number of words and an incomplete word w. You need to auto-complete that word w.
That means, find and print all the possible words which can be formed using the incomplete word w.
Note : Order of words does not matter.
Input Format :
The first line of input contains an integer, that denotes the value of n.
The following line contains n space separated words.
The following line contains the word w, that has to be auto-completed.
Output Format :
Print all possible words in separate lines.
Constraints:
Time Limit: 1 sec
Sample Input 1 :
7
do dont no not note notes den
no
Sample Output 2 :
no
not
note
notes
Sample Input 2 :
7
do dont no not note notes den
de
Sample Output 2 :
den
Sample Input 3 :
7
do dont no not note notes den
nom
Sample Output 3 :
(Empty) There is no word which starts with "nom"
*/

#include <iostream>
#include <string>
#include <vector>
using namespace std;

// #include "TrieNode.h"
#include <string>
#include <vector>
class TrieNode {
	public :
	char data;
	TrieNode **children;
	bool isTerminal;

	TrieNode(char data) {
		this -> data = data;
		children = new TrieNode*[26];
		for(int i = 0; i < 26; i++) {
			children[i] = NULL;
		}
		isTerminal = false;
	}
};

class Trie {
	TrieNode *root;

	public :
	int count;

	Trie() {
		this->count = 0;
		root = new TrieNode('\0');
	}

	bool insertWord(TrieNode *root, string word) {
		// Base case
		if(word.size() == 0) {
			if (!root->isTerminal) {
				root -> isTerminal = true;
				return true;	
			} else {
				return false;
			}
		}

		// Small Calculation
		int index = word[0] - 'a';
		TrieNode *child;
		if(root -> children[index] != NULL) {
			child = root -> children[index];
		}
		else {
			child = new TrieNode(word[0]);
			root -> children[index] = child;
		}

		// Recursive call
		return insertWord(child, word.substr(1));
	}

	// For user
	void insertWord(string word) {
		if (insertWord(root, word)) {
			this->count++;
		}
	}
    
    void printAuto(TrieNode* root, string word, string s){
        
        if(root -> isTerminal == true){
            cout << word + s << endl;
            bool flag = false;
            for(int i = 0; i < 26; i++){
                if(root -> children[i] != NULL){
                    flag = true;
                    break;
                }
            }
            if(!flag)
               return; 
        }
        
        for(int i = 0; i < 26; i++){
        	if(root -> children[i] != NULL){
                printAuto(root -> children[i], word, s + root -> children[i] -> data);
            }
        }
    }
    
    void autoCompleteHelper(TrieNode* root, string pattern, string word){
        
        if(root == NULL){
            return;
        }
        
        if(pattern.size() == 0){
            printAuto(root, word, "");
            return;
        }
        int i = pattern[0] - 'a';
        autoCompleteHelper(root -> children[i], pattern.substr(1), word);
    }
    
    void autoComplete(vector<string> input, string pattern) {
        
        if(input.size() == 0){
            return;
        }

        for(int i = 0; i < input.size(); i++){
            insertWord(input[i]);
        }
        
        autoCompleteHelper(root, pattern, pattern);
    }
};


int main() {
    Trie t;
    int n;
    cin >> n;

    vector<string> vect;

    for (int i = 0; i < n; ++i) {
        string word;
        cin >> word;
        vect.push_back(word);
    }

    string pattern;
    cin >> pattern;

    t.autoComplete(vect, pattern);
}
